<!DOCTYPE html>
<html>

<head>
    <title>Geodesign Hub OSM Buildings Viewer</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <link type="text/css" rel="stylesheet" href="assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="assets/css/style.css">
    <link rel="stylesheet" type="text/css" href="assets/css/base.css">

    <link rel="stylesheet" href="/assets/OSMBuildings/OSMBuildings.css">
    <link rel="stylesheet" href="/assets/js/humane/flatty.css">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Raleway' rel='stylesheet' type='text/css'>
    <script type="text/javascript" src="/assets/js/jquery/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/OSMBuildings/OSMBuildings.js"></script>
    <script type="text/javascript" src="/assets/js/geojsonlint/geojsonlint.js"></script>
    <script type="text/javascript" src="/assets/js/humane/humane.min.js"></script>
</head>

<body>
    <div class="container-fluid">
        <div class="row">

            <div class="col-sm-4 col-md-4 main">



                <h1 class="page-header">Geodesign Hub 3D Viewer</h1>
                <section class="information">
                    <p class="description">This project uses <a href="http://osmbuildings.org/" target="_blank">OSM Buildings</a> library for visualization and design data from <a href="http://www.geodesignhub.com/">Geodesign Hub</a>. Please see the <a href="https://github.com/hrishiballal/GDH3DViewer">GitHub repository</a>                        for more information.</p>
                    <br>
                    <div class="instruction">
                        <ol>
                            <li>Use the Geodeisgn Hub API <a href="https://www.geodesignhub.com/api/" target="_blank">GET Synthesis JSON</a> call to get a design JSON. Sample GeoJSON is <a href="https://gist.github.com/hrishiballal/7e02d0d04b37c5d0fcb6?short_path=9ecf4a9">here</a>.</li>
                            <li>Paste the GeoJSON below</li>
                            <li>Choose if you want streets to be rendered</li>
                            <li>Click "Generate Scene" button</li>

                        </ol>
                    </div>
                    <textarea id="gjTA" name="styled-textarea">Paste GeoJSON from Geodesign Hub here...</textarea><br>
                    <input id="genStreetsCB" class="checkbox-custom" name="checkbox-1" type="checkbox"> Generate Streets
                    <br> <br>
                    <p><button class="button" onclick="submitGJ()">Generate Scene</button></p>

                    <p></p>


                    <br>
                    <div class="glcontrol">
                        <h4>Map Controls:</h4>
                        <span class="tilt">
          <button class="dec">&#8601;</button>
          <button class="inc">&#8599;</button>
        </span>
                        <span class="rotation">
          <button class="inc">&#8630;</button>
          <button class="dec">&#8631;</button>
        </span>
                        <span class="zoom">
          <button class="dec">-</button>
          <button class="inc">+</button>
        </span>
                    </div>
                    <br>
                </section>

            </div>

            <div id="glMap" class="col-sm-8 col-md-8 sidebar">

            </div>

        </div>
    </div>


    <div id="container">

        <div id="left">

            <!--end left-->
        </div>
        <div id="right">

            <!--end right-->
        </div>
        <!--container-->
    </div>

    <script>
        var glb = {};
        var osmb = new OSMBuildings({
            baseURL: 'assets/OSMBuildings/',
            position: {
                latitude: 51.478496359866696,
                longitude: 0.2217864990234375
            },
            zoom: 16,
            minZoom: 12,
            maxZoom: 20,
            state: false, // stores map position/rotation in url
            attribution: '© 3D <a href="http://osmbuildings.org/copyright/">OSM Buildings</a>'
        }).appendTo('glMap');
        // osmb.addGeoJSONTiles('https://{s}.data.osmbuildings.org/0.2/anonymous/tile/{z}/{x}/{y}.json', {
        //     "color": "#ffe9ec",
        //     "fadeIn": true
        // });

        // osmb.addMapTiles(
        //   'http://a.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        //     attribution: '© Data <a href="http://openstreetmap.org/copyright/">OpenStreetMap</a> · © Map <a href="http://mapbox.com">MapBox</a>'
        //   }
        // );
        osmb.addMapTiles(
            'https://{s}.tiles.mapbox.com/v3/cygnus2936.curedn3y/{z}/{x}/{y}.png', {
                attribution: '© Data <a href="http://openstreetmap.org/copyright/">OpenStreetMap</a> · © Map <a href="http://mapbox.com">MapBox</a>'
            }
        );

        osmb.setTilt(45);
        var controlButtons = document.querySelectorAll('.glcontrol button');

        for (var i = 0, il = controlButtons.length; i < il; i++) {
            controlButtons[i].addEventListener('click', function(e) {
                var button = this;
                var parentClassList = button.parentNode.classList;
                var direction = button.classList.contains('inc') ? 1 : -1;
                var increment;
                var property;

                if (parentClassList.contains('tilt')) {
                    property = 'Tilt';
                    increment = direction * 10;
                }
                if (parentClassList.contains('rotation')) {
                    property = 'Rotation';
                    increment = direction * 10;
                }
                if (parentClassList.contains('zoom')) {
                    property = 'Zoom';
                    increment = direction * 1;
                }
                if (property) {
                    osmb['set' + property](osmb['get' + property]() + increment);
                }
            });
        }

        function setbg(color) {
            document.getElementById("styled").style.background = color;
        }

        function submitGJ() {
            var gj = document.getElementById("gjTA").value;
            var gjerrors = geojsonhint.hint(gj);
            if (gjerrors.length > 0) {
                humane.log("The GeoJSON you have entered is invalid.. ", {
                    addnCls: 'humane-flatty-error'
                });
            } else {
                gj = JSON.parse(gj);
                var genstreets = document.getElementById("genStreetsCB").checked;
                start3dWorker(gj, genstreets);
            }
        }

        function start3dWorker(allFeaturesList, genstreets) {
            humane.log("Processing..", {
                addnCls: 'humane-flatty-info'
            });
            var threeDWorker = new Worker('/assets/workers/3dlib.js');
            threeDWorker.onerror = function(e) {
                console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
            };
            threeDWorker.postMessage({
                'allFeaturesList': JSON.stringify(allFeaturesList),
                'genstreets': JSON.stringify(genstreets)
            });
            threeDWorker.addEventListener('message', function(e) {
                //  console.log(e.data);
                var gjsonData = e.data.polygons;
                var latlng = e.data.center;
                setMapCenter(latlng);
                updateGLData(gjsonData);
            }, false);
        }

        function setMapCenter(latlng) {
            ll = JSON.parse(latlng);
            osmb.setPosition({
                latitude: ll[0],
                longitude: ll[1]
            });

        }

        function guid() {
            function s4() {
                return Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1);
            }
            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                s4() + '-' + s4() + s4() + s4();
        }

        function updateGLData(gjsonData) {

            humane.log("Rendering Scene..", {
                addnCls: 'humane-flatty-success'
            });
            if (glb.gjLayer) {
                var k = glb.gjLayer;
                k.destroy();
                glb.gjLayer = "";
            }
            // var d = JSON.parse(gjsonData);
            // for (var k1 = 0; k1<d.features.length;k1++){
            //     var uuid = guid();
            //     var curfeat = d['features'][k1];
            //     if (curfeat.geometry.type==="Point"){
            //     osmb.addOBJ('assets/objs/ldhhouse.obj', { latitude: curfeat.geometry.coordinates[1], longitude: curfeat.geometry.coordinates[0]}, { id: uuid, color: 'red',scale:0.001});
            //     }
            // }

            var x = osmb.addGeoJSON(JSON.parse(gjsonData));
            glb.gjLayer = x;
        }
    </script>
</body>
<script>
    var apitoken = "<%= apitoken  %>"; //var test is now assigned to getTest which will only work on browsers
    var projectid = "<%= projectid %>"; //var test is now assigned to getTest which will only work on browsers 
    var diagramid = "<%= diagramid %>"; //var test is now assigned to getTest which will only work on browsers 
    var synthesisid = "<%= synthesisid %>"; //var test is now assigned to getTest which will only work on browsers  
    var cteamid = "<%= cteamid %>"; //var test is now assigned to getTest which will only work on browsers  
    var gjresults = <%- result %>;
    (function() {
        if ((apitoken !== "0" && projectid !== "0" && diagramid !== "0")  ) {
           
            if (gjresults.features.length > 0) {
                $("#gjTA").text(JSON.stringify(gjresults));
                submitGJ();
            }
        }
        else if (apitoken !== "0" && projectid !== "0" && cteamid !== "0" && synthesisid !=="0"){

            if (gjresults[0].features.length > 0) {
                $("#gjTA").text(JSON.stringify(gjresults[0]));
                submitGJ();
            }
        }
    })();
</script>

</html>